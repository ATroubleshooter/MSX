NestorBASIC version 1.11
Автор Nestor Soriano (Konami Man), Декабрь 2004

1. ЧТО ТАКОЕ NESTORBASIC?

NestorBASIC это набор подпрограмм(функций,процедур) в машинном коде, интегрированных в один файл, 
презназначенных для использования в программах, написанных на MSX-BASIC. NestorBASIC обеспечивает, 
без утраты совместимости с Turbo-BASIC, следующую функциональность:

- Полный доступ ко всей страничной оперативной памяти компьютера(всей памяти, в 
  случае DOS 1, всей свободной памяти в случае DOS 2), вплоть до 4 Mb.
- Доступ ко всей видеопамяти(VRAM), с возможностью пересылки блоков данных как
  в пределах VRAM, так и между VRAM и RAM.
- Размещение БЕЙСИК-программ в страничной памяти, с возможностью поочередно(ПЕРЕХОД ИЗ ОДНОЙ ПРОГРАММЫ В ДРУГУЮ С СОХ ПЕ?)
  работать с разными программами без нарушения целостности переменных.
- Доступ к файлам на диске и непосредственно к физическим секторам, с
  возможностью чтения/записи напрямую в/из страничной RAM и VRAM. Поиск файлов, 
  работа с директориями.
- Сжатие и распаковка графики.
- Проигрывание Moonblaster-музыки. Подгрузка samplekit'ов.
- Воспроизведение звуковых эффектов на PSG(AY-3-8910).
- Вызов подпрограмм в машинном коде, находящихся в BIOS, SUB-BIOS, в области
  рабочего ОЗУ БЕЙСИК-а, рабочей области системы, или в банке страничного ОЗУ.
- Вызов функций NestorMan, процедур InterNestor Suite и InterNestor Lite.

Все имеющиеся функции доступны через один единственный USR и массив
целочисленных параметров, следовательно они полностью совместимы с TurboBASIC.
Собственно, сам компилятор TurboBASIC содержится в файле NestorBASIC, и
автоматически загружается при резидентной установке NestorBASIC.

NestorBASIC загружается в страницу ОЗУ, не используемую БЕЙСИК-ом, так что нужен
лишь небольшой объем основной памяти BASIC'a (примерно 500 байт) для программы 
перехода. Остальная основная память BASIC'а свободна для программы на БЕЙСИК-е.


2. СИСТЕМНЫЕ ТРЕБОВАНИЯ. ЗАГРУЗКА NESTORBASIC

NestorBASIC работает на любой MSX2/2+/Turbo-R с как минимум 128Кб страничной 
памяти. В случае с DOS 2 нужен хотя бы один свободный банк ОЗУ в первичном
маппере (два, если собираетесь использовать проигрыватели музыки. См. секцию 8 
для подробностей).

Для загрузки NestorBASIC, просто выполните BLOAD"NBASIC.BIN",R. Ни
предварительных, ни последующих команд CLEAR и DEFUSR не требуется. Если
все прошло без ошибок, мы получаем следующее:

- NestorBASIC и TurboBASIC загружены, каждый в свою страницу ОЗУ, и готовы к
работе.

- Размер свободной основной памяти BASIC'a уменьшился прим. на 500 байт, 
которые были заняты программой, осуществляющей переход в страницу NestorBASIC'a.

- Первый USR [USR0(параметр) или просто USR(параметр)] указывает на
вышеупомянутую программу перехода. Это обработчик вектора вызова функций
NestorBASIC.

- Создан целочисленный массив параметров P. Этот массив используется для
передачи параметров в функции NestorBASIC'a и приема из них результатов, за
исключением кодов ошибок. Коды ошибок возвращаются USR-командой (функции для
работы с файлами и функции обработки строк требуют собственный строковый массив,
который нужно объявлять отдельно. См. секцию 4 для подробностей). Первые пять
элементов P инициализированы следующим образом:

P(0) = Количество доступных страниц памяти, или код ошибки
P(1) = Мажорная версия NestorBASIC
P(2) = Минорная версия NestorBASIC, в формате BCD (должна показываться 
       в шестнадцатиричном формате)
P(3) = Мажорная версия MSX-DOS
P(4) = Минорная версия MSX-DOS, в формате BCD (должна показываться 
       в шестнадцатиричном формате)
       
Число доступных страниц ОЗУ всегда будет как минимум 5. Меньшее значение 
в P(0) будет отражать код ошибки, возникшей при резидентной установке
NestorBASIC'a:

0: Компьютер не имеет страничной памяти, или в нем только 64K страничного ОЗУ.
1: Дисковая ошибка при чтении NestorBASIC или TurboBASIC из файла NBASIC.BIN.
2: Нет свободных страниц в первичном маппере. Эта ошибка может появиться только
   под DOS 2.
3: NestorBASIC уже был установлен. Все переменные были проинициализированы.
4: Неопределено в этой версии.

После резидентной загрузки NestorBASIC'a можно резервировать память для других
резидентных подпрограмм в обычном порядке, т. е. использовать команду CLEAR для
установки начала зарезервированной области.
Тем не менее, в связи с тем, что NestorBASIC производит переключения
слотов/банков в странице 2, и интерпретатор БЕЙСИКа располагает стек в области
памяти ниже области строковых переменных и области, зарезервированной для
пользователя, есть нижний предел для адреса, устанавливаемого командой CLEAR.
А конкретно, нельзя зарезервировать память с адреса меньше, чем определяется
данной формулой:

&HC000 + (MAXFILES+1)*267 + FRE("") + 100

Также, помните, что команда CLEAR, как и загрузка/очистка/модификация программы
на БЕЙСИКе стирает все переменные. В этом случае, P-массив должен быть
переопределен командой DEFINT P:DIM P(15), и это должно быть сделано вне
турбо-блоков. Также, F-массив должен быть переопределен если требуется (см.
секцию 4 для подробностей о массиве F). Если нужно объявить F-массив внутри
турбо-блока, необходимо сделать это в первой строке турбо-блока, чтобы
обезопасить использование функций NestorBASIC'а:

10 'save"autoexec.bas"
20 BLOAD"nbasic.bin",R:IF P(0)<5 THEN PRINT "Error!":END
30 CLEAR 100:DEFINT P:DIM P(15)
40 _TURBO ON(P())
50 DIM F$(1) 'See section 4
...
65000 _TURBO OFF
65010 RUN"next.bas"

10 'save"next.bas"
20 DEFINT P:DIM P(15)
30 _TURBO ON(P())
40 DIM F$(0) 'If F$(1) is not needed. See section 4.1
...
65000 _TURBO OFF

Также, помните, что нулевой USR всегда зарезервирован за NestorBASIC'ом как
вектор вызовов. Векторы с USR1 по USR9 не заняты.

3. ЛОГИЧЕСКИЕ СТРАНИЦЫ

3.1. ЧТО ТАКОЕ ЛОГИЧЕСКАЯ СТРАНИЦА?

Страничное ОЗУ компьютеров MSX организовано в страницы по 16Кб. Каждый слот ОЗУ 
содержит определенное число S страниц (нумеруемых от 0 до S-1), доступных, когда 
они подключены в адресное пространство активного слота памяти, что
контролируется через порты &HFC to &HFF.

При загрузке NestorBASIC'а, все имеющиеся слоты сканируются на наличие ОЗУ (всей
памяти в случае DOS 1, всей свободной памяти в случае DOS 2), и строится таблица
страниц. В этой таблице, все найденные страницы регистрируются в пары
слот-страница (под DOS 2, страницы сначала выделяются). NestorBASIC идентифицирует 
каждую из этих пар по порядковому номеру в таблице. Этот номер называется номером 
логической страницы, и позволяет пользователю оперировать всей доступной памятью  
в последовательном виде, не заботясь ни о номерах слотов, ни о номерах физических
страниц, в которых она находится.
Например, представим MSX с 128K внутренней RAM (8 страниц) и маппер на 1024Кб
(64 страницы) во внешнем слоте. Тогда, после инициализации NestorBASIC'а, в случае
DOS 1, пользователю будет доступно 72 логических страницы, под номерами с 0 до 71,
и достаточно указать этот номер в соответствующих функциях NestorBASIC'a,
чтобы их использовать. Номера физических слотов и сегментов уже не
потребуются.

Адресное пространство логической страницы (далее - просто "страницы") от &H0000 
до &H3FFF. Если заданы более высокие адреса при вызове функций NestorBASIC, они 
будут преобразованы. То есть, адреса &H4000-&H7FFF, &H8000-&HBFFF и &HC000-&HFFFF
эквивалентны &H0000-&H3FFF при доступе к страницам ОЗУ через NestorBASIC.
Все страницы доступны для чтения и записи, но есть важные ограничения по 
отношению к первым шести:

- Страница 0 содержит собственно NestorBASIC, и лишь небольшая область ОЗУ 
остается доступной для пользователя в конце неё. Используйте функцию 1 чтобы 
получить начальный адрес этой области (описание функции см. в секции 10).

- Страница 1 содержит компилятор TurboBASIC. Можно перезаписать эту страницу
только в том случае, если Вы не собираетесь использовать компилятор.

- Сегмент 2 всегда подключен к 2 странице (адреса &H8000 - &HBFFF), и содержит
исполняемую BASIC-программу и часть её переменных.

- Segment 3 is always connected to page 3 (addresses &HC000 to &HFFFF), and 
contains the MSX work area and part of the BASIC program variables. Be 
careful when writing here.

- Segment 4 is used as an internal buffer by some NestorBASIC functions. You 
can use this segment to store your own data as long as you don't use these 
NestorBASIC functions. See section 10 or appendix 1 to know which functions 
use this segment.

- If it exists, segment 5 is initially free, and is not used by NestorBASIC. 
But when the music replayer is loaded, it is stored in this segment. See 
section 8 for details.

All other existing segments are completely available for the user.

WARNING: The roles of logical segments 2 and 4 have been swapped when 
stepping from version 0.07 to 1.00. In version 0.07 and previous versions, 
segment 2 was NestorBASIC internal buffer, and segment 4 was BASIC page 2 
RAM.

When using the data block exchange functions, be careful for not surpassing 
the address &H3FFF when adding the block length to the destination address 
(for example, don't try to transfer &H2000 bytes specifying address &H3000 as 
destination address). In such a case, segment 0 or segment 3 is overwrited, 
and then the result is unpredictable.

Note: using function 80 it is possible to force NestorBASIC to allocate less 
memory segments than the total amount available. This is useful under DOS 2 
when other programs which also need to allocate memory (for example RAM disk 
or NestorMan) are used simultaneously with NestorBASIC. See section 10 for 
the functions' description.


3.2. USING VRAM AS LOGICAL SEGMENTS

NestorBASIC allows you to use the VRAM for emulate extra RAM segments. If 
NestorBASIC founds a number S of segments, segment numbers 0 to S-1 refers to 
RAM segments, as explained above. But segments S to S+7 or S+3 (according to 
the VRAM capacity, 128K or 64K) are also available, and they refer to VRAM.

Let's return to the previos sample. When installing NestorBASIC, the number 
of available segments is 72. Then, segments 72 to 79 (if the computer has 
128K VRAM) or 72 to 75 (if the computer has 64K VRAM) are available for VRAM 
access.
